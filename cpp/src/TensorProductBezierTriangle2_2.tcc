#include "TensorProductBezierTriangle2_2.hh"

#include "utils.hh"

namespace pev
{
template <typename T, typename C>
using TPBT2_2 = TensorProductBezierTriangle<T, C, 2, 2>;


template <typename T, typename C>
const typename TPBT2_2<T, C>::DomainPoints& TPBT2_2<T, C>::domainPoints()
{
    static const auto result = (DomainPoints{} <<
          1.,   0.,   0.,   1.,   0.,   0.,
          1.,   0.,   0., 1./2, 1./2,   0.,
          1.,   0.,   0., 1./2,   0., 1./2,
          1.,   0.,   0.,   0.,   1.,   0.,
          1.,   0.,   0.,   0., 1./2, 1./2,
          1.,   0.,   0.,   0.,   0.,   1.,
        1./2, 1./2,   0.,   1.,   0.,   0.,
        1./2, 1./2,   0., 1./2, 1./2,   0.,
        1./2, 1./2,   0., 1./2,   0., 1./2,
        1./2, 1./2,   0.,   0.,   1.,   0.,
        1./2, 1./2,   0.,   0., 1./2, 1./2,
        1./2, 1./2,   0.,   0.,   0.,   1.,
        1./2,   0., 1./2,   1.,   0.,   0.,
        1./2,   0., 1./2, 1./2, 1./2,   0.,
        1./2,   0., 1./2, 1./2,   0., 1./2,
        1./2,   0., 1./2,   0.,   1.,   0.,
        1./2,   0., 1./2,   0., 1./2, 1./2,
        1./2,   0., 1./2,   0.,   0.,   1.,
          0.,   1.,   0.,   1.,   0.,   0.,
          0.,   1.,   0., 1./2, 1./2,   0.,
          0.,   1.,   0., 1./2,   0., 1./2,
          0.,   1.,   0.,   0.,   1.,   0.,
          0.,   1.,   0.,   0., 1./2, 1./2,
          0.,   1.,   0.,   0.,   0.,   1.,
          0., 1./2, 1./2,   1.,   0.,   0.,
          0., 1./2, 1./2, 1./2, 1./2,   0.,
          0., 1./2, 1./2, 1./2,   0., 1./2,
          0., 1./2, 1./2,   0.,   1.,   0.,
          0., 1./2, 1./2,   0., 1./2, 1./2,
          0., 1./2, 1./2,   0.,   0.,   1.,
          0.,   0.,   1.,   1.,   0.,   0.,
          0.,   0.,   1., 1./2, 1./2,   0.,
          0.,   0.,   1., 1./2,   0., 1./2,
          0.,   0.,   1.,   0.,   1.,   0.,
          0.,   0.,   1.,   0., 1./2, 1./2,
          0.,   0.,   1.,   0.,   0.,   1.
    ).finished();
    return result;
}


template <typename T, typename C>
typename TPBT2_2<T, C>::Basis TPBT2_2<T, C>::makeBasis(const Coords& pos)
{
    return (Basis{} <<
            1 * pos[0] * pos[0] * pos[3] * pos[3],
            2 * pos[0] * pos[0] * pos[3] * pos[4],
            2 * pos[0] * pos[0] * pos[3] * pos[5],
            1 * pos[0] * pos[0] * pos[4] * pos[4],
            2 * pos[0] * pos[0] * pos[4] * pos[5],
            1 * pos[0] * pos[0] * pos[5] * pos[5],
            2 * pos[0] * pos[1] * pos[3] * pos[3],
            4 * pos[0] * pos[1] * pos[3] * pos[4],
            4 * pos[0] * pos[1] * pos[3] * pos[5],
            2 * pos[0] * pos[1] * pos[4] * pos[4],
            4 * pos[0] * pos[1] * pos[4] * pos[5],
            2 * pos[0] * pos[1] * pos[5] * pos[5],
            2 * pos[0] * pos[2] * pos[3] * pos[3],
            4 * pos[0] * pos[2] * pos[3] * pos[4],
            4 * pos[0] * pos[2] * pos[3] * pos[5],
            2 * pos[0] * pos[2] * pos[4] * pos[4],
            4 * pos[0] * pos[2] * pos[4] * pos[5],
            2 * pos[0] * pos[2] * pos[5] * pos[5],
            1 * pos[1] * pos[1] * pos[3] * pos[3],
            2 * pos[1] * pos[1] * pos[3] * pos[4],
            2 * pos[1] * pos[1] * pos[3] * pos[5],
            1 * pos[1] * pos[1] * pos[4] * pos[4],
            2 * pos[1] * pos[1] * pos[4] * pos[5],
            1 * pos[1] * pos[1] * pos[5] * pos[5],
            2 * pos[1] * pos[2] * pos[3] * pos[3],
            4 * pos[1] * pos[2] * pos[3] * pos[4],
            4 * pos[1] * pos[2] * pos[3] * pos[5],
            2 * pos[1] * pos[2] * pos[4] * pos[4],
            4 * pos[1] * pos[2] * pos[4] * pos[5],
            2 * pos[1] * pos[2] * pos[5] * pos[5],
            1 * pos[2] * pos[2] * pos[3] * pos[3],
            2 * pos[2] * pos[2] * pos[3] * pos[4],
            2 * pos[2] * pos[2] * pos[3] * pos[5],
            1 * pos[2] * pos[2] * pos[4] * pos[4],
            2 * pos[2] * pos[2] * pos[4] * pos[5],
            1 * pos[2] * pos[2] * pos[5] * pos[5]
            ).finished();
}


template <typename T, typename C>
template <std::size_t I, std::size_t D>
typename TPBT2_2<T, C>::Coeffs TPBT2_2<T, C>::splitCoeffs(const Coeffs& in)
{
    static_assert(D >= 0 && D < 2, "Split dimension D must be 0 or 1");
    static_assert(I >= 0 && I < 4, "Subdivision index must be between 0 and 3");
    auto out = Coeffs{};
    if(D == 0 && I == 0)
    {
        out[0] = in[0];
        out[1] = in[1];
        out[2] = in[2];
        out[3] = in[3];
        out[4] = in[4];
        out[5] = in[5];
        out[6] = 1./2 * in[0] + 1./2 * in[6];
        out[7] = 1./2 * in[1] + 1./2 * in[7];
        out[8] = 1./2 * in[2] + 1./2 * in[8];
        out[9] = 1./2 * in[3] + 1./2 * in[9];
        out[10] = 1./2 * in[4] + 1./2 * in[10];
        out[11] = 1./2 * in[5] + 1./2 * in[11];
        out[12] = 1./2 * in[0] + 1./2 * in[12];
        out[13] = 1./2 * in[1] + 1./2 * in[13];
        out[14] = 1./2 * in[2] + 1./2 * in[14];
        out[15] = 1./2 * in[3] + 1./2 * in[15];
        out[16] = 1./2 * in[4] + 1./2 * in[16];
        out[17] = 1./2 * in[5] + 1./2 * in[17];
        out[18] = 1./4 * in[0] + 1./2 * in[6] + 1./4 * in[18];
        out[19] = 1./4 * in[1] + 1./2 * in[7] + 1./4 * in[19];
        out[20] = 1./4 * in[2] + 1./2 * in[8] + 1./4 * in[20];
        out[21] = 1./4 * in[3] + 1./2 * in[9] + 1./4 * in[21];
        out[22] = 1./4 * in[4] + 1./2 * in[10] + 1./4 * in[22];
        out[23] = 1./4 * in[5] + 1./2 * in[11] + 1./4 * in[23];
        out[24] = 1./4 * in[0] + 1./4 * in[6] + 1./4 * in[12] + 1./4 * in[24];
        out[25] = 1./4 * in[1] + 1./4 * in[7] + 1./4 * in[13] + 1./4 * in[25];
        out[26] = 1./4 * in[2] + 1./4 * in[8] + 1./4 * in[14] + 1./4 * in[26];
        out[27] = 1./4 * in[3] + 1./4 * in[9] + 1./4 * in[15] + 1./4 * in[27];
        out[28] = 1./4 * in[4] + 1./4 * in[10] + 1./4 * in[16] + 1./4 * in[28];
        out[29] = 1./4 * in[5] + 1./4 * in[11] + 1./4 * in[17] + 1./4 * in[29];
        out[30] = 1./4 * in[0] + 1./2 * in[12] + 1./4 * in[30];
        out[31] = 1./4 * in[1] + 1./2 * in[13] + 1./4 * in[31];
        out[32] = 1./4 * in[2] + 1./2 * in[14] + 1./4 * in[32];
        out[33] = 1./4 * in[3] + 1./2 * in[15] + 1./4 * in[33];
        out[34] = 1./4 * in[4] + 1./2 * in[16] + 1./4 * in[34];
        out[35] = 1./4 * in[5] + 1./2 * in[17] + 1./4 * in[35];
    }
    else if(D == 0 && I == 1)
    {
        out[0] = 1./4 * in[0] + 1./2 * in[6] + 1./4 * in[18];
        out[1] = 1./4 * in[1] + 1./2 * in[7] + 1./4 * in[19];
        out[2] = 1./4 * in[2] + 1./2 * in[8] + 1./4 * in[20];
        out[3] = 1./4 * in[3] + 1./2 * in[9] + 1./4 * in[21];
        out[4] = 1./4 * in[4] + 1./2 * in[10] + 1./4 * in[22];
        out[5] = 1./4 * in[5] + 1./2 * in[11] + 1./4 * in[23];
        out[6] = 1./2 * in[6] + 1./2 * in[18];
        out[7] = 1./2 * in[7] + 1./2 * in[19];
        out[8] = 1./2 * in[8] + 1./2 * in[20];
        out[9] = 1./2 * in[9] + 1./2 * in[21];
        out[10] = 1./2 * in[10] + 1./2 * in[22];
        out[11] = 1./2 * in[11] + 1./2 * in[23];
        out[12] = 1./4 * in[6] + 1./4 * in[12] + 1./4 * in[18] + 1./4 * in[24];
        out[13] = 1./4 * in[7] + 1./4 * in[13] + 1./4 * in[19] + 1./4 * in[25];
        out[14] = 1./4 * in[8] + 1./4 * in[14] + 1./4 * in[20] + 1./4 * in[26];
        out[15] = 1./4 * in[9] + 1./4 * in[15] + 1./4 * in[21] + 1./4 * in[27];
        out[16] = 1./4 * in[10] + 1./4 * in[16] + 1./4 * in[22] + 1./4 * in[28];
        out[17] = 1./4 * in[11] + 1./4 * in[17] + 1./4 * in[23] + 1./4 * in[29];
        out[18] = in[18];
        out[19] = in[19];
        out[20] = in[20];
        out[21] = in[21];
        out[22] = in[22];
        out[23] = in[23];
        out[24] = 1./2 * in[18] + 1./2 * in[24];
        out[25] = 1./2 * in[19] + 1./2 * in[25];
        out[26] = 1./2 * in[20] + 1./2 * in[26];
        out[27] = 1./2 * in[21] + 1./2 * in[27];
        out[28] = 1./2 * in[22] + 1./2 * in[28];
        out[29] = 1./2 * in[23] + 1./2 * in[29];
        out[30] = 1./4 * in[18] + 1./2 * in[24] + 1./4 * in[30];
        out[31] = 1./4 * in[19] + 1./2 * in[25] + 1./4 * in[31];
        out[32] = 1./4 * in[20] + 1./2 * in[26] + 1./4 * in[32];
        out[33] = 1./4 * in[21] + 1./2 * in[27] + 1./4 * in[33];
        out[34] = 1./4 * in[22] + 1./2 * in[28] + 1./4 * in[34];
        out[35] = 1./4 * in[23] + 1./2 * in[29] + 1./4 * in[35];
    }
    else if(D == 0 && I == 2)
    {
        out[0] = 1./4 * in[0] + 1./2 * in[12] + 1./4 * in[30];
        out[1] = 1./4 * in[1] + 1./2 * in[13] + 1./4 * in[31];
        out[2] = 1./4 * in[2] + 1./2 * in[14] + 1./4 * in[32];
        out[3] = 1./4 * in[3] + 1./2 * in[15] + 1./4 * in[33];
        out[4] = 1./4 * in[4] + 1./2 * in[16] + 1./4 * in[34];
        out[5] = 1./4 * in[5] + 1./2 * in[17] + 1./4 * in[35];
        out[6] = 1./4 * in[6] + 1./4 * in[12] + 1./4 * in[24] + 1./4 * in[30];
        out[7] = 1./4 * in[7] + 1./4 * in[13] + 1./4 * in[25] + 1./4 * in[31];
        out[8] = 1./4 * in[8] + 1./4 * in[14] + 1./4 * in[26] + 1./4 * in[32];
        out[9] = 1./4 * in[9] + 1./4 * in[15] + 1./4 * in[27] + 1./4 * in[33];
        out[10] = 1./4 * in[10] + 1./4 * in[16] + 1./4 * in[28] + 1./4 * in[34];
        out[11] = 1./4 * in[11] + 1./4 * in[17] + 1./4 * in[29] + 1./4 * in[35];
        out[12] = 1./2 * in[12] + 1./2 * in[30];
        out[13] = 1./2 * in[13] + 1./2 * in[31];
        out[14] = 1./2 * in[14] + 1./2 * in[32];
        out[15] = 1./2 * in[15] + 1./2 * in[33];
        out[16] = 1./2 * in[16] + 1./2 * in[34];
        out[17] = 1./2 * in[17] + 1./2 * in[35];
        out[18] = 1./4 * in[18] + 1./2 * in[24] + 1./4 * in[30];
        out[19] = 1./4 * in[19] + 1./2 * in[25] + 1./4 * in[31];
        out[20] = 1./4 * in[20] + 1./2 * in[26] + 1./4 * in[32];
        out[21] = 1./4 * in[21] + 1./2 * in[27] + 1./4 * in[33];
        out[22] = 1./4 * in[22] + 1./2 * in[28] + 1./4 * in[34];
        out[23] = 1./4 * in[23] + 1./2 * in[29] + 1./4 * in[35];
        out[24] = 1./2 * in[24] + 1./2 * in[30];
        out[25] = 1./2 * in[25] + 1./2 * in[31];
        out[26] = 1./2 * in[26] + 1./2 * in[32];
        out[27] = 1./2 * in[27] + 1./2 * in[33];
        out[28] = 1./2 * in[28] + 1./2 * in[34];
        out[29] = 1./2 * in[29] + 1./2 * in[35];
        out[30] = in[30];
        out[31] = in[31];
        out[32] = in[32];
        out[33] = in[33];
        out[34] = in[34];
        out[35] = in[35];
    }
    else if(D == 0 && I == 3)
    {
        out[0] = 1./4 * in[0] + 1./2 * in[6] + 1./4 * in[18];
        out[1] = 1./4 * in[1] + 1./2 * in[7] + 1./4 * in[19];
        out[2] = 1./4 * in[2] + 1./2 * in[8] + 1./4 * in[20];
        out[3] = 1./4 * in[3] + 1./2 * in[9] + 1./4 * in[21];
        out[4] = 1./4 * in[4] + 1./2 * in[10] + 1./4 * in[22];
        out[5] = 1./4 * in[5] + 1./2 * in[11] + 1./4 * in[23];
        out[6] = 1./4 * in[6] + 1./4 * in[12] + 1./4 * in[18] + 1./4 * in[24];
        out[7] = 1./4 * in[7] + 1./4 * in[13] + 1./4 * in[19] + 1./4 * in[25];
        out[8] = 1./4 * in[8] + 1./4 * in[14] + 1./4 * in[20] + 1./4 * in[26];
        out[9] = 1./4 * in[9] + 1./4 * in[15] + 1./4 * in[21] + 1./4 * in[27];
        out[10] = 1./4 * in[10] + 1./4 * in[16] + 1./4 * in[22] + 1./4 * in[28];
        out[11] = 1./4 * in[11] + 1./4 * in[17] + 1./4 * in[23] + 1./4 * in[29];
        out[12] = 1./4 * in[0] + 1./4 * in[6] + 1./4 * in[12] + 1./4 * in[24];
        out[13] = 1./4 * in[1] + 1./4 * in[7] + 1./4 * in[13] + 1./4 * in[25];
        out[14] = 1./4 * in[2] + 1./4 * in[8] + 1./4 * in[14] + 1./4 * in[26];
        out[15] = 1./4 * in[3] + 1./4 * in[9] + 1./4 * in[15] + 1./4 * in[27];
        out[16] = 1./4 * in[4] + 1./4 * in[10] + 1./4 * in[16] + 1./4 * in[28];
        out[17] = 1./4 * in[5] + 1./4 * in[11] + 1./4 * in[17] + 1./4 * in[29];
        out[18] = 1./4 * in[18] + 1./2 * in[24] + 1./4 * in[30];
        out[19] = 1./4 * in[19] + 1./2 * in[25] + 1./4 * in[31];
        out[20] = 1./4 * in[20] + 1./2 * in[26] + 1./4 * in[32];
        out[21] = 1./4 * in[21] + 1./2 * in[27] + 1./4 * in[33];
        out[22] = 1./4 * in[22] + 1./2 * in[28] + 1./4 * in[34];
        out[23] = 1./4 * in[23] + 1./2 * in[29] + 1./4 * in[35];
        out[24] = 1./4 * in[6] + 1./4 * in[12] + 1./4 * in[24] + 1./4 * in[30];
        out[25] = 1./4 * in[7] + 1./4 * in[13] + 1./4 * in[25] + 1./4 * in[31];
        out[26] = 1./4 * in[8] + 1./4 * in[14] + 1./4 * in[26] + 1./4 * in[32];
        out[27] = 1./4 * in[9] + 1./4 * in[15] + 1./4 * in[27] + 1./4 * in[33];
        out[28] = 1./4 * in[10] + 1./4 * in[16] + 1./4 * in[28] + 1./4 * in[34];
        out[29] = 1./4 * in[11] + 1./4 * in[17] + 1./4 * in[29] + 1./4 * in[35];
        out[30] = 1./4 * in[0] + 1./2 * in[12] + 1./4 * in[30];
        out[31] = 1./4 * in[1] + 1./2 * in[13] + 1./4 * in[31];
        out[32] = 1./4 * in[2] + 1./2 * in[14] + 1./4 * in[32];
        out[33] = 1./4 * in[3] + 1./2 * in[15] + 1./4 * in[33];
        out[34] = 1./4 * in[4] + 1./2 * in[16] + 1./4 * in[34];
        out[35] = 1./4 * in[5] + 1./2 * in[17] + 1./4 * in[35];
    }
    else if(D == 1 && I == 0)
    {
        out[0] = in[0];
        out[1] = 1./2 * in[0] + 1./2 * in[1];
        out[2] = 1./2 * in[0] + 1./2 * in[2];
        out[3] = 1./4 * in[0] + 1./2 * in[1] + 1./4 * in[3];
        out[4] = 1./4 * in[0] + 1./4 * in[1] + 1./4 * in[2] + 1./4 * in[4];
        out[5] = 1./4 * in[0] + 1./2 * in[2] + 1./4 * in[5];
        out[6] = in[6];
        out[7] = 1./2 * in[6] + 1./2 * in[7];
        out[8] = 1./2 * in[6] + 1./2 * in[8];
        out[9] = 1./4 * in[6] + 1./2 * in[7] + 1./4 * in[9];
        out[10] = 1./4 * in[6] + 1./4 * in[7] + 1./4 * in[8] + 1./4 * in[10];
        out[11] = 1./4 * in[6] + 1./2 * in[8] + 1./4 * in[11];
        out[12] = in[12];
        out[13] = 1./2 * in[12] + 1./2 * in[13];
        out[14] = 1./2 * in[12] + 1./2 * in[14];
        out[15] = 1./4 * in[12] + 1./2 * in[13] + 1./4 * in[15];
        out[16] = 1./4 * in[12] + 1./4 * in[13] + 1./4 * in[14] + 1./4 * in[16];
        out[17] = 1./4 * in[12] + 1./2 * in[14] + 1./4 * in[17];
        out[18] = in[18];
        out[19] = 1./2 * in[18] + 1./2 * in[19];
        out[20] = 1./2 * in[18] + 1./2 * in[20];
        out[21] = 1./4 * in[18] + 1./2 * in[19] + 1./4 * in[21];
        out[22] = 1./4 * in[18] + 1./4 * in[19] + 1./4 * in[20] + 1./4 * in[22];
        out[23] = 1./4 * in[18] + 1./2 * in[20] + 1./4 * in[23];
        out[24] = in[24];
        out[25] = 1./2 * in[24] + 1./2 * in[25];
        out[26] = 1./2 * in[24] + 1./2 * in[26];
        out[27] = 1./4 * in[24] + 1./2 * in[25] + 1./4 * in[27];
        out[28] = 1./4 * in[24] + 1./4 * in[25] + 1./4 * in[26] + 1./4 * in[28];
        out[29] = 1./4 * in[24] + 1./2 * in[26] + 1./4 * in[29];
        out[30] = in[30];
        out[31] = 1./2 * in[30] + 1./2 * in[31];
        out[32] = 1./2 * in[30] + 1./2 * in[32];
        out[33] = 1./4 * in[30] + 1./2 * in[31] + 1./4 * in[33];
        out[34] = 1./4 * in[30] + 1./4 * in[31] + 1./4 * in[32] + 1./4 * in[34];
        out[35] = 1./4 * in[30] + 1./2 * in[32] + 1./4 * in[35];
    }
    else if(D == 1 && I == 1)
    {
        out[0] = 1./4 * in[0] + 1./2 * in[1] + 1./4 * in[3];
        out[1] = 1./2 * in[1] + 1./2 * in[3];
        out[2] = 1./4 * in[1] + 1./4 * in[2] + 1./4 * in[3] + 1./4 * in[4];
        out[3] = in[3];
        out[4] = 1./2 * in[3] + 1./2 * in[4];
        out[5] = 1./4 * in[3] + 1./2 * in[4] + 1./4 * in[5];
        out[6] = 1./4 * in[6] + 1./2 * in[7] + 1./4 * in[9];
        out[7] = 1./2 * in[7] + 1./2 * in[9];
        out[8] = 1./4 * in[7] + 1./4 * in[8] + 1./4 * in[9] + 1./4 * in[10];
        out[9] = in[9];
        out[10] = 1./2 * in[9] + 1./2 * in[10];
        out[11] = 1./4 * in[9] + 1./2 * in[10] + 1./4 * in[11];
        out[12] = 1./4 * in[12] + 1./2 * in[13] + 1./4 * in[15];
        out[13] = 1./2 * in[13] + 1./2 * in[15];
        out[14] = 1./4 * in[13] + 1./4 * in[14] + 1./4 * in[15] + 1./4 * in[16];
        out[15] = in[15];
        out[16] = 1./2 * in[15] + 1./2 * in[16];
        out[17] = 1./4 * in[15] + 1./2 * in[16] + 1./4 * in[17];
        out[18] = 1./4 * in[18] + 1./2 * in[19] + 1./4 * in[21];
        out[19] = 1./2 * in[19] + 1./2 * in[21];
        out[20] = 1./4 * in[19] + 1./4 * in[20] + 1./4 * in[21] + 1./4 * in[22];
        out[21] = in[21];
        out[22] = 1./2 * in[21] + 1./2 * in[22];
        out[23] = 1./4 * in[21] + 1./2 * in[22] + 1./4 * in[23];
        out[24] = 1./4 * in[24] + 1./2 * in[25] + 1./4 * in[27];
        out[25] = 1./2 * in[25] + 1./2 * in[27];
        out[26] = 1./4 * in[25] + 1./4 * in[26] + 1./4 * in[27] + 1./4 * in[28];
        out[27] = in[27];
        out[28] = 1./2 * in[27] + 1./2 * in[28];
        out[29] = 1./4 * in[27] + 1./2 * in[28] + 1./4 * in[29];
        out[30] = 1./4 * in[30] + 1./2 * in[31] + 1./4 * in[33];
        out[31] = 1./2 * in[31] + 1./2 * in[33];
        out[32] = 1./4 * in[31] + 1./4 * in[32] + 1./4 * in[33] + 1./4 * in[34];
        out[33] = in[33];
        out[34] = 1./2 * in[33] + 1./2 * in[34];
        out[35] = 1./4 * in[33] + 1./2 * in[34] + 1./4 * in[35];
    }
    else if(D == 1 && I == 2)
    {
        out[0] = 1./4 * in[0] + 1./2 * in[2] + 1./4 * in[5];
        out[1] = 1./4 * in[1] + 1./4 * in[2] + 1./4 * in[4] + 1./4 * in[5];
        out[2] = 1./2 * in[2] + 1./2 * in[5];
        out[3] = 1./4 * in[3] + 1./2 * in[4] + 1./4 * in[5];
        out[4] = 1./2 * in[4] + 1./2 * in[5];
        out[5] = in[5];
        out[6] = 1./4 * in[6] + 1./2 * in[8] + 1./4 * in[11];
        out[7] = 1./4 * in[7] + 1./4 * in[8] + 1./4 * in[10] + 1./4 * in[11];
        out[8] = 1./2 * in[8] + 1./2 * in[11];
        out[9] = 1./4 * in[9] + 1./2 * in[10] + 1./4 * in[11];
        out[10] = 1./2 * in[10] + 1./2 * in[11];
        out[11] = in[11];
        out[12] = 1./4 * in[12] + 1./2 * in[14] + 1./4 * in[17];
        out[13] = 1./4 * in[13] + 1./4 * in[14] + 1./4 * in[16] + 1./4 * in[17];
        out[14] = 1./2 * in[14] + 1./2 * in[17];
        out[15] = 1./4 * in[15] + 1./2 * in[16] + 1./4 * in[17];
        out[16] = 1./2 * in[16] + 1./2 * in[17];
        out[17] = in[17];
        out[18] = 1./4 * in[18] + 1./2 * in[20] + 1./4 * in[23];
        out[19] = 1./4 * in[19] + 1./4 * in[20] + 1./4 * in[22] + 1./4 * in[23];
        out[20] = 1./2 * in[20] + 1./2 * in[23];
        out[21] = 1./4 * in[21] + 1./2 * in[22] + 1./4 * in[23];
        out[22] = 1./2 * in[22] + 1./2 * in[23];
        out[23] = in[23];
        out[24] = 1./4 * in[24] + 1./2 * in[26] + 1./4 * in[29];
        out[25] = 1./4 * in[25] + 1./4 * in[26] + 1./4 * in[28] + 1./4 * in[29];
        out[26] = 1./2 * in[26] + 1./2 * in[29];
        out[27] = 1./4 * in[27] + 1./2 * in[28] + 1./4 * in[29];
        out[28] = 1./2 * in[28] + 1./2 * in[29];
        out[29] = in[29];
        out[30] = 1./4 * in[30] + 1./2 * in[32] + 1./4 * in[35];
        out[31] = 1./4 * in[31] + 1./4 * in[32] + 1./4 * in[34] + 1./4 * in[35];
        out[32] = 1./2 * in[32] + 1./2 * in[35];
        out[33] = 1./4 * in[33] + 1./2 * in[34] + 1./4 * in[35];
        out[34] = 1./2 * in[34] + 1./2 * in[35];
        out[35] = in[35];
    }
    else
    {
        out[0] = 1./4 * in[0] + 1./2 * in[1] + 1./4 * in[3];
        out[1] = 1./4 * in[1] + 1./4 * in[2] + 1./4 * in[3] + 1./4 * in[4];
        out[2] = 1./4 * in[0] + 1./4 * in[1] + 1./4 * in[2] + 1./4 * in[4];
        out[3] = 1./4 * in[3] + 1./2 * in[4] + 1./4 * in[5];
        out[4] = 1./4 * in[1] + 1./4 * in[2] + 1./4 * in[4] + 1./4 * in[5];
        out[5] = 1./4 * in[0] + 1./2 * in[2] + 1./4 * in[5];
        out[6] = 1./4 * in[6] + 1./2 * in[7] + 1./4 * in[9];
        out[7] = 1./4 * in[7] + 1./4 * in[8] + 1./4 * in[9] + 1./4 * in[10];
        out[8] = 1./4 * in[6] + 1./4 * in[7] + 1./4 * in[8] + 1./4 * in[10];
        out[9] = 1./4 * in[9] + 1./2 * in[10] + 1./4 * in[11];
        out[10] = 1./4 * in[7] + 1./4 * in[8] + 1./4 * in[10] + 1./4 * in[11];
        out[11] = 1./4 * in[6] + 1./2 * in[8] + 1./4 * in[11];
        out[12] = 1./4 * in[12] + 1./2 * in[13] + 1./4 * in[15];
        out[13] = 1./4 * in[13] + 1./4 * in[14] + 1./4 * in[15] + 1./4 * in[16];
        out[14] = 1./4 * in[12] + 1./4 * in[13] + 1./4 * in[14] + 1./4 * in[16];
        out[15] = 1./4 * in[15] + 1./2 * in[16] + 1./4 * in[17];
        out[16] = 1./4 * in[13] + 1./4 * in[14] + 1./4 * in[16] + 1./4 * in[17];
        out[17] = 1./4 * in[12] + 1./2 * in[14] + 1./4 * in[17];
        out[18] = 1./4 * in[18] + 1./2 * in[19] + 1./4 * in[21];
        out[19] = 1./4 * in[19] + 1./4 * in[20] + 1./4 * in[21] + 1./4 * in[22];
        out[20] = 1./4 * in[18] + 1./4 * in[19] + 1./4 * in[20] + 1./4 * in[22];
        out[21] = 1./4 * in[21] + 1./2 * in[22] + 1./4 * in[23];
        out[22] = 1./4 * in[19] + 1./4 * in[20] + 1./4 * in[22] + 1./4 * in[23];
        out[23] = 1./4 * in[18] + 1./2 * in[20] + 1./4 * in[23];
        out[24] = 1./4 * in[24] + 1./2 * in[25] + 1./4 * in[27];
        out[25] = 1./4 * in[25] + 1./4 * in[26] + 1./4 * in[27] + 1./4 * in[28];
        out[26] = 1./4 * in[24] + 1./4 * in[25] + 1./4 * in[26] + 1./4 * in[28];
        out[27] = 1./4 * in[27] + 1./2 * in[28] + 1./4 * in[29];
        out[28] = 1./4 * in[25] + 1./4 * in[26] + 1./4 * in[28] + 1./4 * in[29];
        out[29] = 1./4 * in[24] + 1./2 * in[26] + 1./4 * in[29];
        out[30] = 1./4 * in[30] + 1./2 * in[31] + 1./4 * in[33];
        out[31] = 1./4 * in[31] + 1./4 * in[32] + 1./4 * in[33] + 1./4 * in[34];
        out[32] = 1./4 * in[30] + 1./4 * in[31] + 1./4 * in[32] + 1./4 * in[34];
        out[33] = 1./4 * in[33] + 1./2 * in[34] + 1./4 * in[35];
        out[34] = 1./4 * in[31] + 1./4 * in[32] + 1./4 * in[34] + 1./4 * in[35];
        out[35] = 1./4 * in[30] + 1./2 * in[32] + 1./4 * in[35];
    }
    return out;
}


template <typename T, typename C>
typename TPBT2_2<T, C>::Coeffs TPBT2_2<T, C>::computeCoeffs(const Coeffs& in)
{
    auto out = Coeffs{};
    out[0] = in[0];
    out[1] = -1./2 * in[0] + 2. * in[1] + -1./2 * in[3];
    out[2] = -1./2 * in[0] + 2. * in[2] + -1./2 * in[5];
    out[3] = in[3];
    out[4] = -1./2 * in[3] + 2. * in[4] + -1./2 * in[5];
    out[5] = in[5];
    out[6] = -1./2 * in[0] + 2. * in[6] + -1./2 * in[18];
    out[7] = 1./4 * in[0] + -1. * in[1] + 1./4 * in[3] + -1. * in[6]
            + 4. * in[7] + -1. * in[9] + 1./4 * in[18] + -1. * in[19]
            + 1./4 * in[21];
    out[8] = 1./4 * in[0] + -1. * in[2] + 1./4 * in[5] + -1. * in[6]
            + 4. * in[8] + -1. * in[11] + 1./4 * in[18] + -1. * in[20]
            + 1./4 * in[23];
    out[9] = -1./2 * in[3] + 2. * in[9] + -1./2 * in[21];
    out[10] = 1./4 * in[3] + -1. * in[4] + 1./4 * in[5] + -1. * in[9]
            + 4. * in[10] + -1. * in[11] + 1./4 * in[21] + -1. * in[22]
            + 1./4 * in[23];
    out[11] = -1./2 * in[5] + 2. * in[11] + -1./2 * in[23];
    out[12] = -1./2 * in[0] + 2. * in[12] + -1./2 * in[30];
    out[13] = 1./4 * in[0] + -1. * in[1] + 1./4 * in[3] + -1. * in[12]
            + 4. * in[13] + -1. * in[15] + 1./4 * in[30] + -1. * in[31]
            + 1./4 * in[33];
    out[14] = 1./4 * in[0] + -1. * in[2] + 1./4 * in[5] + -1. * in[12]
            + 4. * in[14] + -1. * in[17] + 1./4 * in[30] + -1. * in[32]
            + 1./4 * in[35];
    out[15] = -1./2 * in[3] + 2. * in[15] + -1./2 * in[33];
    out[16] = 1./4 * in[3] + -1. * in[4] + 1./4 * in[5] + -1. * in[15]
            + 4. * in[16] + -1. * in[17] + 1./4 * in[33] + -1. * in[34]
            + 1./4 * in[35];
    out[17] = -1./2 * in[5] + 2. * in[17] + -1./2 * in[35];
    out[18] = in[18];
    out[19] = -1./2 * in[18] + 2. * in[19] + -1./2 * in[21];
    out[20] = -1./2 * in[18] + 2. * in[20] + -1./2 * in[23];
    out[21] = in[21];
    out[22] = -1./2 * in[21] + 2. * in[22] + -1./2 * in[23];
    out[23] = in[23];
    out[24] = -1./2 * in[18] + 2. * in[24] + -1./2 * in[30];
    out[25] = 1./4 * in[18] + -1. * in[19] + 1./4 * in[21] + -1. * in[24]
            + 4. * in[25] + -1. * in[27] + 1./4 * in[30] + -1. * in[31]
            + 1./4 * in[33];
    out[26] = 1./4 * in[18] + -1. * in[20] + 1./4 * in[23] + -1. * in[24]
            + 4. * in[26] + -1. * in[29] + 1./4 * in[30] + -1. * in[32]
            + 1./4 * in[35];
    out[27] = -1./2 * in[21] + 2. * in[27] + -1./2 * in[33];
    out[28] = 1./4 * in[21] + -1. * in[22] + 1./4 * in[23] + -1. * in[27]
            + 4. * in[28] + -1. * in[29] + 1./4 * in[33] + -1. * in[34]
            + 1./4 * in[35];
    out[29] = -1./2 * in[23] + 2. * in[29] + -1./2 * in[35];
    out[30] = in[30];
    out[31] = -1./2 * in[30] + 2. * in[31] + -1./2 * in[33];
    out[32] = -1./2 * in[30] + 2. * in[32] + -1./2 * in[35];
    out[33] = in[33];
    out[34] = -1./2 * in[33] + 2. * in[34] + -1./2 * in[35];
    out[35] = in[35];
    return out;
}


template <typename T, typename C>
typename TensorProductDerivative<0, T, C, 2, 2>::DerivCoeffs
TensorProductDerivative<0, T, C, 2, 2>::deriv_op(const Coeffs& in, std::size_t dir)
{
    assert(dir >= 0 && dir < 3);
    switch(dir)
    {
        case 0:
        {
            auto out = DerivCoeffs{};
            out[0] = 2. * in[0];
            out[1] = 2. * in[1];
            out[2] = 2. * in[2];
            out[3] = 2. * in[3];
            out[4] = 2. * in[4];
            out[5] = 2. * in[5];
            out[6] = 2. * in[6];
            out[7] = 2. * in[7];
            out[8] = 2. * in[8];
            out[9] = 2. * in[9];
            out[10] = 2. * in[10];
            out[11] = 2. * in[11];
            out[12] = 2. * in[12];
            out[13] = 2. * in[13];
            out[14] = 2. * in[14];
            out[15] = 2. * in[15];
            out[16] = 2. * in[16];
            out[17] = 2. * in[17];
            return out;
        }
        case 1:
        {
            auto out = DerivCoeffs{};
            out[0] = 2. * in[6];
            out[1] = 2. * in[7];
            out[2] = 2. * in[8];
            out[3] = 2. * in[9];
            out[4] = 2. * in[10];
            out[5] = 2. * in[11];
            out[6] = 2. * in[18];
            out[7] = 2. * in[19];
            out[8] = 2. * in[20];
            out[9] = 2. * in[21];
            out[10] = 2. * in[22];
            out[11] = 2. * in[23];
            out[12] = 2. * in[24];
            out[13] = 2. * in[25];
            out[14] = 2. * in[26];
            out[15] = 2. * in[27];
            out[16] = 2. * in[28];
            out[17] = 2. * in[29];
            return out;
        }
        case 2:
        {
            auto out = DerivCoeffs{};
            out[0] = 2. * in[12];
            out[1] = 2. * in[13];
            out[2] = 2. * in[14];
            out[3] = 2. * in[15];
            out[4] = 2. * in[16];
            out[5] = 2. * in[17];
            out[6] = 2. * in[24];
            out[7] = 2. * in[25];
            out[8] = 2. * in[26];
            out[9] = 2. * in[27];
            out[10] = 2. * in[28];
            out[11] = 2. * in[29];
            out[12] = 2. * in[30];
            out[13] = 2. * in[31];
            out[14] = 2. * in[32];
            out[15] = 2. * in[33];
            out[16] = 2. * in[34];
            out[17] = 2. * in[35];
            return out;
        }
        default:
            assert(false);
    }
}

template <typename T, typename C>
typename TensorProductDerivative<1, T, C, 2, 2>::DerivCoeffs
TensorProductDerivative<1, T, C, 2, 2>::deriv_op(const Coeffs& in, std::size_t dir)
{
    static_assert(std::tuple_size<Coeffs>() == 18, "Wrong number of elements!");
    static_assert(std::tuple_size<DerivCoeffs>() == 9, "Wrong number of elements!");
    assert(dir >= 0 && dir < 3);
    switch(dir)
    {
        case 0:
        {
            auto out = DerivCoeffs{};
            out[0] = 2. * in[0];
            out[1] = 2. * in[1];
            out[2] = 2. * in[2];
            out[3] = 2. * in[6];
            out[4] = 2. * in[7];
            out[5] = 2. * in[8];
            out[6] = 2. * in[12];
            out[7] = 2. * in[13];
            out[8] = 2. * in[14];
            out[9] = 2. * in[18];
            out[10] = 2. * in[19];
            out[11] = 2. * in[20];
            out[12] = 2. * in[24];
            out[13] = 2. * in[25];
            out[14] = 2. * in[26];
            out[15] = 2. * in[30];
            out[16] = 2. * in[31];
            out[17] = 2. * in[32];
            return out;
        }
        case 1:
        {
            auto out = DerivCoeffs{};
            out[0] = 2. * in[1];
            out[1] = 2. * in[3];
            out[2] = 2. * in[4];
            out[3] = 2. * in[7];
            out[4] = 2. * in[9];
            out[5] = 2. * in[10];
            out[6] = 2. * in[13];
            out[7] = 2. * in[15];
            out[8] = 2. * in[16];
            out[9] = 2. * in[19];
            out[10] = 2. * in[21];
            out[11] = 2. * in[22];
            out[12] = 2. * in[25];
            out[13] = 2. * in[27];
            out[14] = 2. * in[28];
            out[15] = 2. * in[31];
            out[16] = 2. * in[33];
            out[17] = 2. * in[34];
            return out;
        }
        case 2:
        {
            auto out = DerivCoeffs{};
            out[0] = 2. * in[2];
            out[1] = 2. * in[4];
            out[2] = 2. * in[5];
            out[3] = 2. * in[8];
            out[4] = 2. * in[10];
            out[5] = 2. * in[11];
            out[6] = 2. * in[14];
            out[7] = 2. * in[16];
            out[8] = 2. * in[17];
            out[9] = 2. * in[20];
            out[10] = 2. * in[22];
            out[11] = 2. * in[23];
            out[12] = 2. * in[26];
            out[13] = 2. * in[28];
            out[14] = 2. * in[29];
            out[15] = 2. * in[32];
            out[16] = 2. * in[34];
            out[17] = 2. * in[35];
            return out;
        }
        default:
            assert(false);
    }
}

} // namespace pev
